/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LabTestResult } from "./LabTestResult";
import { LabTestResultCountArgs } from "./LabTestResultCountArgs";
import { LabTestResultFindManyArgs } from "./LabTestResultFindManyArgs";
import { LabTestResultFindUniqueArgs } from "./LabTestResultFindUniqueArgs";
import { CreateLabTestResultArgs } from "./CreateLabTestResultArgs";
import { UpdateLabTestResultArgs } from "./UpdateLabTestResultArgs";
import { DeleteLabTestResultArgs } from "./DeleteLabTestResultArgs";
import { TestType } from "../../testType/base/TestType";
import { LabTechnician } from "../../labTechnician/base/LabTechnician";
import { LabTestResultService } from "../labTestResult.service";
@graphql.Resolver(() => LabTestResult)
export class LabTestResultResolverBase {
  constructor(protected readonly service: LabTestResultService) {}

  async _labTestResultsMeta(
    @graphql.Args() args: LabTestResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LabTestResult])
  async labTestResults(
    @graphql.Args() args: LabTestResultFindManyArgs
  ): Promise<LabTestResult[]> {
    return this.service.labTestResults(args);
  }

  @graphql.Query(() => LabTestResult, { nullable: true })
  async labTestResult(
    @graphql.Args() args: LabTestResultFindUniqueArgs
  ): Promise<LabTestResult | null> {
    const result = await this.service.labTestResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LabTestResult)
  async createLabTestResult(
    @graphql.Args() args: CreateLabTestResultArgs
  ): Promise<LabTestResult> {
    return await this.service.createLabTestResult({
      ...args,
      data: {
        ...args.data,

        testType: args.data.testType
          ? {
              connect: args.data.testType,
            }
          : undefined,

        labTechnician: args.data.labTechnician
          ? {
              connect: args.data.labTechnician,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => LabTestResult)
  async updateLabTestResult(
    @graphql.Args() args: UpdateLabTestResultArgs
  ): Promise<LabTestResult | null> {
    try {
      return await this.service.updateLabTestResult({
        ...args,
        data: {
          ...args.data,

          testType: args.data.testType
            ? {
                connect: args.data.testType,
              }
            : undefined,

          labTechnician: args.data.labTechnician
            ? {
                connect: args.data.labTechnician,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LabTestResult)
  async deleteLabTestResult(
    @graphql.Args() args: DeleteLabTestResultArgs
  ): Promise<LabTestResult | null> {
    try {
      return await this.service.deleteLabTestResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => TestType, {
    nullable: true,
    name: "testType",
  })
  async getTestType(
    @graphql.Parent() parent: LabTestResult
  ): Promise<TestType | null> {
    const result = await this.service.getTestType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => LabTechnician, {
    nullable: true,
    name: "labTechnician",
  })
  async getLabTechnician(
    @graphql.Parent() parent: LabTestResult
  ): Promise<LabTechnician | null> {
    const result = await this.service.getLabTechnician(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
