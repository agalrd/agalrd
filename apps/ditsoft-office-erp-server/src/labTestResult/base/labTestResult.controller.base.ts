/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LabTestResultService } from "../labTestResult.service";
import { LabTestResultCreateInput } from "./LabTestResultCreateInput";
import { LabTestResult } from "./LabTestResult";
import { LabTestResultFindManyArgs } from "./LabTestResultFindManyArgs";
import { LabTestResultWhereUniqueInput } from "./LabTestResultWhereUniqueInput";
import { LabTestResultUpdateInput } from "./LabTestResultUpdateInput";

export class LabTestResultControllerBase {
  constructor(protected readonly service: LabTestResultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LabTestResult })
  async createLabTestResult(
    @common.Body() data: LabTestResultCreateInput
  ): Promise<LabTestResult> {
    return await this.service.createLabTestResult({
      data: {
        ...data,

        testType: data.testType
          ? {
              connect: data.testType,
            }
          : undefined,

        labTechnician: data.labTechnician
          ? {
              connect: data.labTechnician,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        resultValue: true,
        testDate: true,

        testType: {
          select: {
            id: true,
          },
        },

        labTechnician: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LabTestResult] })
  @ApiNestedQuery(LabTestResultFindManyArgs)
  async labTestResults(
    @common.Req() request: Request
  ): Promise<LabTestResult[]> {
    const args = plainToClass(LabTestResultFindManyArgs, request.query);
    return this.service.labTestResults({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        resultValue: true,
        testDate: true,

        testType: {
          select: {
            id: true,
          },
        },

        labTechnician: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LabTestResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async labTestResult(
    @common.Param() params: LabTestResultWhereUniqueInput
  ): Promise<LabTestResult | null> {
    const result = await this.service.labTestResult({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        resultValue: true,
        testDate: true,

        testType: {
          select: {
            id: true,
          },
        },

        labTechnician: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LabTestResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLabTestResult(
    @common.Param() params: LabTestResultWhereUniqueInput,
    @common.Body() data: LabTestResultUpdateInput
  ): Promise<LabTestResult | null> {
    try {
      return await this.service.updateLabTestResult({
        where: params,
        data: {
          ...data,

          testType: data.testType
            ? {
                connect: data.testType,
              }
            : undefined,

          labTechnician: data.labTechnician
            ? {
                connect: data.labTechnician,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          resultValue: true,
          testDate: true,

          testType: {
            select: {
              id: true,
            },
          },

          labTechnician: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LabTestResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLabTestResult(
    @common.Param() params: LabTestResultWhereUniqueInput
  ): Promise<LabTestResult | null> {
    try {
      return await this.service.deleteLabTestResult({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          resultValue: true,
          testDate: true,

          testType: {
            select: {
              id: true,
            },
          },

          labTechnician: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
