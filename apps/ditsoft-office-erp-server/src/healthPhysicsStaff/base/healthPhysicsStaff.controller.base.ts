/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HealthPhysicsStaffService } from "../healthPhysicsStaff.service";
import { HealthPhysicsStaffCreateInput } from "./HealthPhysicsStaffCreateInput";
import { HealthPhysicsStaff } from "./HealthPhysicsStaff";
import { HealthPhysicsStaffFindManyArgs } from "./HealthPhysicsStaffFindManyArgs";
import { HealthPhysicsStaffWhereUniqueInput } from "./HealthPhysicsStaffWhereUniqueInput";
import { HealthPhysicsStaffUpdateInput } from "./HealthPhysicsStaffUpdateInput";

export class HealthPhysicsStaffControllerBase {
  constructor(protected readonly service: HealthPhysicsStaffService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: HealthPhysicsStaff })
  async createHealthPhysicsStaff(
    @common.Body() data: HealthPhysicsStaffCreateInput
  ): Promise<HealthPhysicsStaff> {
    return await this.service.createHealthPhysicsStaff({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        position: true,
        credentials: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [HealthPhysicsStaff] })
  @ApiNestedQuery(HealthPhysicsStaffFindManyArgs)
  async healthPhysicsStaffs(
    @common.Req() request: Request
  ): Promise<HealthPhysicsStaff[]> {
    const args = plainToClass(HealthPhysicsStaffFindManyArgs, request.query);
    return this.service.healthPhysicsStaffs({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        position: true,
        credentials: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: HealthPhysicsStaff })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async healthPhysicsStaff(
    @common.Param() params: HealthPhysicsStaffWhereUniqueInput
  ): Promise<HealthPhysicsStaff | null> {
    const result = await this.service.healthPhysicsStaff({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        position: true,
        credentials: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: HealthPhysicsStaff })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHealthPhysicsStaff(
    @common.Param() params: HealthPhysicsStaffWhereUniqueInput,
    @common.Body() data: HealthPhysicsStaffUpdateInput
  ): Promise<HealthPhysicsStaff | null> {
    try {
      return await this.service.updateHealthPhysicsStaff({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          position: true,
          credentials: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: HealthPhysicsStaff })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHealthPhysicsStaff(
    @common.Param() params: HealthPhysicsStaffWhereUniqueInput
  ): Promise<HealthPhysicsStaff | null> {
    try {
      return await this.service.deleteHealthPhysicsStaff({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          position: true,
          credentials: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
