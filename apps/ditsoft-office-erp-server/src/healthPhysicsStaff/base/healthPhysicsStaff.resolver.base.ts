/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { HealthPhysicsStaff } from "./HealthPhysicsStaff";
import { HealthPhysicsStaffCountArgs } from "./HealthPhysicsStaffCountArgs";
import { HealthPhysicsStaffFindManyArgs } from "./HealthPhysicsStaffFindManyArgs";
import { HealthPhysicsStaffFindUniqueArgs } from "./HealthPhysicsStaffFindUniqueArgs";
import { CreateHealthPhysicsStaffArgs } from "./CreateHealthPhysicsStaffArgs";
import { UpdateHealthPhysicsStaffArgs } from "./UpdateHealthPhysicsStaffArgs";
import { DeleteHealthPhysicsStaffArgs } from "./DeleteHealthPhysicsStaffArgs";
import { HealthPhysicsStaffService } from "../healthPhysicsStaff.service";
@graphql.Resolver(() => HealthPhysicsStaff)
export class HealthPhysicsStaffResolverBase {
  constructor(protected readonly service: HealthPhysicsStaffService) {}

  async _healthPhysicsStaffsMeta(
    @graphql.Args() args: HealthPhysicsStaffCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [HealthPhysicsStaff])
  async healthPhysicsStaffs(
    @graphql.Args() args: HealthPhysicsStaffFindManyArgs
  ): Promise<HealthPhysicsStaff[]> {
    return this.service.healthPhysicsStaffs(args);
  }

  @graphql.Query(() => HealthPhysicsStaff, { nullable: true })
  async healthPhysicsStaff(
    @graphql.Args() args: HealthPhysicsStaffFindUniqueArgs
  ): Promise<HealthPhysicsStaff | null> {
    const result = await this.service.healthPhysicsStaff(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => HealthPhysicsStaff)
  async createHealthPhysicsStaff(
    @graphql.Args() args: CreateHealthPhysicsStaffArgs
  ): Promise<HealthPhysicsStaff> {
    return await this.service.createHealthPhysicsStaff({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => HealthPhysicsStaff)
  async updateHealthPhysicsStaff(
    @graphql.Args() args: UpdateHealthPhysicsStaffArgs
  ): Promise<HealthPhysicsStaff | null> {
    try {
      return await this.service.updateHealthPhysicsStaff({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HealthPhysicsStaff)
  async deleteHealthPhysicsStaff(
    @graphql.Args() args: DeleteHealthPhysicsStaffArgs
  ): Promise<HealthPhysicsStaff | null> {
    try {
      return await this.service.deleteHealthPhysicsStaff(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
