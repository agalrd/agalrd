/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TestType as PrismaTestType,
  LabTestResult as PrismaLabTestResult,
} from "@prisma/client";

export class TestTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TestTypeCountArgs, "select">): Promise<number> {
    return this.prisma.testType.count(args);
  }

  async testTypes(
    args: Prisma.TestTypeFindManyArgs
  ): Promise<PrismaTestType[]> {
    return this.prisma.testType.findMany(args);
  }
  async testType(
    args: Prisma.TestTypeFindUniqueArgs
  ): Promise<PrismaTestType | null> {
    return this.prisma.testType.findUnique(args);
  }
  async createTestType(
    args: Prisma.TestTypeCreateArgs
  ): Promise<PrismaTestType> {
    return this.prisma.testType.create(args);
  }
  async updateTestType(
    args: Prisma.TestTypeUpdateArgs
  ): Promise<PrismaTestType> {
    return this.prisma.testType.update(args);
  }
  async deleteTestType(
    args: Prisma.TestTypeDeleteArgs
  ): Promise<PrismaTestType> {
    return this.prisma.testType.delete(args);
  }

  async findLabTestResults(
    parentId: string,
    args: Prisma.LabTestResultFindManyArgs
  ): Promise<PrismaLabTestResult[]> {
    return this.prisma.testType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .labTestResults(args);
  }
}
