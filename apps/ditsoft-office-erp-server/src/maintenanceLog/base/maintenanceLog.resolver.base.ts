/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MaintenanceLog } from "./MaintenanceLog";
import { MaintenanceLogCountArgs } from "./MaintenanceLogCountArgs";
import { MaintenanceLogFindManyArgs } from "./MaintenanceLogFindManyArgs";
import { MaintenanceLogFindUniqueArgs } from "./MaintenanceLogFindUniqueArgs";
import { CreateMaintenanceLogArgs } from "./CreateMaintenanceLogArgs";
import { UpdateMaintenanceLogArgs } from "./UpdateMaintenanceLogArgs";
import { DeleteMaintenanceLogArgs } from "./DeleteMaintenanceLogArgs";
import { MaintenanceLogService } from "../maintenanceLog.service";
@graphql.Resolver(() => MaintenanceLog)
export class MaintenanceLogResolverBase {
  constructor(protected readonly service: MaintenanceLogService) {}

  async _maintenanceLogsMeta(
    @graphql.Args() args: MaintenanceLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MaintenanceLog])
  async maintenanceLogs(
    @graphql.Args() args: MaintenanceLogFindManyArgs
  ): Promise<MaintenanceLog[]> {
    return this.service.maintenanceLogs(args);
  }

  @graphql.Query(() => MaintenanceLog, { nullable: true })
  async maintenanceLog(
    @graphql.Args() args: MaintenanceLogFindUniqueArgs
  ): Promise<MaintenanceLog | null> {
    const result = await this.service.maintenanceLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MaintenanceLog)
  async createMaintenanceLog(
    @graphql.Args() args: CreateMaintenanceLogArgs
  ): Promise<MaintenanceLog> {
    return await this.service.createMaintenanceLog({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MaintenanceLog)
  async updateMaintenanceLog(
    @graphql.Args() args: UpdateMaintenanceLogArgs
  ): Promise<MaintenanceLog | null> {
    try {
      return await this.service.updateMaintenanceLog({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MaintenanceLog)
  async deleteMaintenanceLog(
    @graphql.Args() args: DeleteMaintenanceLogArgs
  ): Promise<MaintenanceLog | null> {
    try {
      return await this.service.deleteMaintenanceLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
