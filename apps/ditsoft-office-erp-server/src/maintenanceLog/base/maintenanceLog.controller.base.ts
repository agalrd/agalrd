/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MaintenanceLogService } from "../maintenanceLog.service";
import { MaintenanceLogCreateInput } from "./MaintenanceLogCreateInput";
import { MaintenanceLog } from "./MaintenanceLog";
import { MaintenanceLogFindManyArgs } from "./MaintenanceLogFindManyArgs";
import { MaintenanceLogWhereUniqueInput } from "./MaintenanceLogWhereUniqueInput";
import { MaintenanceLogUpdateInput } from "./MaintenanceLogUpdateInput";

export class MaintenanceLogControllerBase {
  constructor(protected readonly service: MaintenanceLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MaintenanceLog })
  async createMaintenanceLog(
    @common.Body() data: MaintenanceLogCreateInput
  ): Promise<MaintenanceLog> {
    return await this.service.createMaintenanceLog({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        maintenanceDate: true,
        performedBy: true,
        notes: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MaintenanceLog] })
  @ApiNestedQuery(MaintenanceLogFindManyArgs)
  async maintenanceLogs(
    @common.Req() request: Request
  ): Promise<MaintenanceLog[]> {
    const args = plainToClass(MaintenanceLogFindManyArgs, request.query);
    return this.service.maintenanceLogs({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        maintenanceDate: true,
        performedBy: true,
        notes: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async maintenanceLog(
    @common.Param() params: MaintenanceLogWhereUniqueInput
  ): Promise<MaintenanceLog | null> {
    const result = await this.service.maintenanceLog({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        maintenanceDate: true,
        performedBy: true,
        notes: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMaintenanceLog(
    @common.Param() params: MaintenanceLogWhereUniqueInput,
    @common.Body() data: MaintenanceLogUpdateInput
  ): Promise<MaintenanceLog | null> {
    try {
      return await this.service.updateMaintenanceLog({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          maintenanceDate: true,
          performedBy: true,
          notes: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMaintenanceLog(
    @common.Param() params: MaintenanceLogWhereUniqueInput
  ): Promise<MaintenanceLog | null> {
    try {
      return await this.service.deleteMaintenanceLog({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          maintenanceDate: true,
          performedBy: true,
          notes: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
