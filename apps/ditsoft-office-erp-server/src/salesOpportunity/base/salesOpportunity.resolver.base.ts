/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SalesOpportunity } from "./SalesOpportunity";
import { SalesOpportunityCountArgs } from "./SalesOpportunityCountArgs";
import { SalesOpportunityFindManyArgs } from "./SalesOpportunityFindManyArgs";
import { SalesOpportunityFindUniqueArgs } from "./SalesOpportunityFindUniqueArgs";
import { CreateSalesOpportunityArgs } from "./CreateSalesOpportunityArgs";
import { UpdateSalesOpportunityArgs } from "./UpdateSalesOpportunityArgs";
import { DeleteSalesOpportunityArgs } from "./DeleteSalesOpportunityArgs";
import { SalesOpportunityService } from "../salesOpportunity.service";
@graphql.Resolver(() => SalesOpportunity)
export class SalesOpportunityResolverBase {
  constructor(protected readonly service: SalesOpportunityService) {}

  async _salesOpportunitiesMeta(
    @graphql.Args() args: SalesOpportunityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SalesOpportunity])
  async salesOpportunities(
    @graphql.Args() args: SalesOpportunityFindManyArgs
  ): Promise<SalesOpportunity[]> {
    return this.service.salesOpportunities(args);
  }

  @graphql.Query(() => SalesOpportunity, { nullable: true })
  async salesOpportunity(
    @graphql.Args() args: SalesOpportunityFindUniqueArgs
  ): Promise<SalesOpportunity | null> {
    const result = await this.service.salesOpportunity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SalesOpportunity)
  async createSalesOpportunity(
    @graphql.Args() args: CreateSalesOpportunityArgs
  ): Promise<SalesOpportunity> {
    return await this.service.createSalesOpportunity({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SalesOpportunity)
  async updateSalesOpportunity(
    @graphql.Args() args: UpdateSalesOpportunityArgs
  ): Promise<SalesOpportunity | null> {
    try {
      return await this.service.updateSalesOpportunity({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalesOpportunity)
  async deleteSalesOpportunity(
    @graphql.Args() args: DeleteSalesOpportunityArgs
  ): Promise<SalesOpportunity | null> {
    try {
      return await this.service.deleteSalesOpportunity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
