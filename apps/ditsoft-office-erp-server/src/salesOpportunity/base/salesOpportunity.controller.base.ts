/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SalesOpportunityService } from "../salesOpportunity.service";
import { SalesOpportunityCreateInput } from "./SalesOpportunityCreateInput";
import { SalesOpportunity } from "./SalesOpportunity";
import { SalesOpportunityFindManyArgs } from "./SalesOpportunityFindManyArgs";
import { SalesOpportunityWhereUniqueInput } from "./SalesOpportunityWhereUniqueInput";
import { SalesOpportunityUpdateInput } from "./SalesOpportunityUpdateInput";

export class SalesOpportunityControllerBase {
  constructor(protected readonly service: SalesOpportunityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SalesOpportunity })
  async createSalesOpportunity(
    @common.Body() data: SalesOpportunityCreateInput
  ): Promise<SalesOpportunity> {
    return await this.service.createSalesOpportunity({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        opportunityName: true,
        potentialValue: true,
        stage: true,
        closeDate: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SalesOpportunity] })
  @ApiNestedQuery(SalesOpportunityFindManyArgs)
  async salesOpportunities(
    @common.Req() request: Request
  ): Promise<SalesOpportunity[]> {
    const args = plainToClass(SalesOpportunityFindManyArgs, request.query);
    return this.service.salesOpportunities({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        opportunityName: true,
        potentialValue: true,
        stage: true,
        closeDate: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SalesOpportunity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async salesOpportunity(
    @common.Param() params: SalesOpportunityWhereUniqueInput
  ): Promise<SalesOpportunity | null> {
    const result = await this.service.salesOpportunity({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        opportunityName: true,
        potentialValue: true,
        stage: true,
        closeDate: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SalesOpportunity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSalesOpportunity(
    @common.Param() params: SalesOpportunityWhereUniqueInput,
    @common.Body() data: SalesOpportunityUpdateInput
  ): Promise<SalesOpportunity | null> {
    try {
      return await this.service.updateSalesOpportunity({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          opportunityName: true,
          potentialValue: true,
          stage: true,
          closeDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SalesOpportunity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSalesOpportunity(
    @common.Param() params: SalesOpportunityWhereUniqueInput
  ): Promise<SalesOpportunity | null> {
    try {
      return await this.service.deleteSalesOpportunity({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          opportunityName: true,
          potentialValue: true,
          stage: true,
          closeDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
