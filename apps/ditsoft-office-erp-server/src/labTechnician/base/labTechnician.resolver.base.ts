/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LabTechnician } from "./LabTechnician";
import { LabTechnicianCountArgs } from "./LabTechnicianCountArgs";
import { LabTechnicianFindManyArgs } from "./LabTechnicianFindManyArgs";
import { LabTechnicianFindUniqueArgs } from "./LabTechnicianFindUniqueArgs";
import { CreateLabTechnicianArgs } from "./CreateLabTechnicianArgs";
import { UpdateLabTechnicianArgs } from "./UpdateLabTechnicianArgs";
import { DeleteLabTechnicianArgs } from "./DeleteLabTechnicianArgs";
import { LabTestResultFindManyArgs } from "../../labTestResult/base/LabTestResultFindManyArgs";
import { LabTestResult } from "../../labTestResult/base/LabTestResult";
import { LabTechnicianService } from "../labTechnician.service";
@graphql.Resolver(() => LabTechnician)
export class LabTechnicianResolverBase {
  constructor(protected readonly service: LabTechnicianService) {}

  async _labTechniciansMeta(
    @graphql.Args() args: LabTechnicianCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LabTechnician])
  async labTechnicians(
    @graphql.Args() args: LabTechnicianFindManyArgs
  ): Promise<LabTechnician[]> {
    return this.service.labTechnicians(args);
  }

  @graphql.Query(() => LabTechnician, { nullable: true })
  async labTechnician(
    @graphql.Args() args: LabTechnicianFindUniqueArgs
  ): Promise<LabTechnician | null> {
    const result = await this.service.labTechnician(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LabTechnician)
  async createLabTechnician(
    @graphql.Args() args: CreateLabTechnicianArgs
  ): Promise<LabTechnician> {
    return await this.service.createLabTechnician({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LabTechnician)
  async updateLabTechnician(
    @graphql.Args() args: UpdateLabTechnicianArgs
  ): Promise<LabTechnician | null> {
    try {
      return await this.service.updateLabTechnician({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LabTechnician)
  async deleteLabTechnician(
    @graphql.Args() args: DeleteLabTechnicianArgs
  ): Promise<LabTechnician | null> {
    try {
      return await this.service.deleteLabTechnician(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [LabTestResult], { name: "labTestResults" })
  async findLabTestResults(
    @graphql.Parent() parent: LabTechnician,
    @graphql.Args() args: LabTestResultFindManyArgs
  ): Promise<LabTestResult[]> {
    const results = await this.service.findLabTestResults(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
