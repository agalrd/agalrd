/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LabTechnician as PrismaLabTechnician,
  LabTestResult as PrismaLabTestResult,
} from "@prisma/client";

export class LabTechnicianServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LabTechnicianCountArgs, "select">
  ): Promise<number> {
    return this.prisma.labTechnician.count(args);
  }

  async labTechnicians(
    args: Prisma.LabTechnicianFindManyArgs
  ): Promise<PrismaLabTechnician[]> {
    return this.prisma.labTechnician.findMany(args);
  }
  async labTechnician(
    args: Prisma.LabTechnicianFindUniqueArgs
  ): Promise<PrismaLabTechnician | null> {
    return this.prisma.labTechnician.findUnique(args);
  }
  async createLabTechnician(
    args: Prisma.LabTechnicianCreateArgs
  ): Promise<PrismaLabTechnician> {
    return this.prisma.labTechnician.create(args);
  }
  async updateLabTechnician(
    args: Prisma.LabTechnicianUpdateArgs
  ): Promise<PrismaLabTechnician> {
    return this.prisma.labTechnician.update(args);
  }
  async deleteLabTechnician(
    args: Prisma.LabTechnicianDeleteArgs
  ): Promise<PrismaLabTechnician> {
    return this.prisma.labTechnician.delete(args);
  }

  async findLabTestResults(
    parentId: string,
    args: Prisma.LabTestResultFindManyArgs
  ): Promise<PrismaLabTestResult[]> {
    return this.prisma.labTechnician
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .labTestResults(args);
  }
}
