/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LabTechnicianService } from "../labTechnician.service";
import { LabTechnicianCreateInput } from "./LabTechnicianCreateInput";
import { LabTechnician } from "./LabTechnician";
import { LabTechnicianFindManyArgs } from "./LabTechnicianFindManyArgs";
import { LabTechnicianWhereUniqueInput } from "./LabTechnicianWhereUniqueInput";
import { LabTechnicianUpdateInput } from "./LabTechnicianUpdateInput";
import { LabTestResultFindManyArgs } from "../../labTestResult/base/LabTestResultFindManyArgs";
import { LabTestResult } from "../../labTestResult/base/LabTestResult";
import { LabTestResultWhereUniqueInput } from "../../labTestResult/base/LabTestResultWhereUniqueInput";

export class LabTechnicianControllerBase {
  constructor(protected readonly service: LabTechnicianService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LabTechnician })
  async createLabTechnician(
    @common.Body() data: LabTechnicianCreateInput
  ): Promise<LabTechnician> {
    return await this.service.createLabTechnician({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        position: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LabTechnician] })
  @ApiNestedQuery(LabTechnicianFindManyArgs)
  async labTechnicians(
    @common.Req() request: Request
  ): Promise<LabTechnician[]> {
    const args = plainToClass(LabTechnicianFindManyArgs, request.query);
    return this.service.labTechnicians({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        position: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LabTechnician })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async labTechnician(
    @common.Param() params: LabTechnicianWhereUniqueInput
  ): Promise<LabTechnician | null> {
    const result = await this.service.labTechnician({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        position: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LabTechnician })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLabTechnician(
    @common.Param() params: LabTechnicianWhereUniqueInput,
    @common.Body() data: LabTechnicianUpdateInput
  ): Promise<LabTechnician | null> {
    try {
      return await this.service.updateLabTechnician({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          position: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LabTechnician })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLabTechnician(
    @common.Param() params: LabTechnicianWhereUniqueInput
  ): Promise<LabTechnician | null> {
    try {
      return await this.service.deleteLabTechnician({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          firstName: true,
          lastName: true,
          position: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/labTestResults")
  @ApiNestedQuery(LabTestResultFindManyArgs)
  async findLabTestResults(
    @common.Req() request: Request,
    @common.Param() params: LabTechnicianWhereUniqueInput
  ): Promise<LabTestResult[]> {
    const query = plainToClass(LabTestResultFindManyArgs, request.query);
    const results = await this.service.findLabTestResults(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        resultValue: true,
        testDate: true,

        testType: {
          select: {
            id: true,
          },
        },

        labTechnician: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/labTestResults")
  async connectLabTestResults(
    @common.Param() params: LabTechnicianWhereUniqueInput,
    @common.Body() body: LabTestResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      labTestResults: {
        connect: body,
      },
    };
    await this.service.updateLabTechnician({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/labTestResults")
  async updateLabTestResults(
    @common.Param() params: LabTechnicianWhereUniqueInput,
    @common.Body() body: LabTestResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      labTestResults: {
        set: body,
      },
    };
    await this.service.updateLabTechnician({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/labTestResults")
  async disconnectLabTestResults(
    @common.Param() params: LabTechnicianWhereUniqueInput,
    @common.Body() body: LabTestResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      labTestResults: {
        disconnect: body,
      },
    };
    await this.service.updateLabTechnician({
      where: params,
      data,
      select: { id: true },
    });
  }
}
