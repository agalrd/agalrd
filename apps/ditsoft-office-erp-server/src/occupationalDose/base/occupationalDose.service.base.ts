/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  OccupationalDose as PrismaOccupationalDose,
} from "@prisma/client";

export class OccupationalDoseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OccupationalDoseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.occupationalDose.count(args);
  }

  async occupationalDoses(
    args: Prisma.OccupationalDoseFindManyArgs
  ): Promise<PrismaOccupationalDose[]> {
    return this.prisma.occupationalDose.findMany(args);
  }
  async occupationalDose(
    args: Prisma.OccupationalDoseFindUniqueArgs
  ): Promise<PrismaOccupationalDose | null> {
    return this.prisma.occupationalDose.findUnique(args);
  }
  async createOccupationalDose(
    args: Prisma.OccupationalDoseCreateArgs
  ): Promise<PrismaOccupationalDose> {
    return this.prisma.occupationalDose.create(args);
  }
  async updateOccupationalDose(
    args: Prisma.OccupationalDoseUpdateArgs
  ): Promise<PrismaOccupationalDose> {
    return this.prisma.occupationalDose.update(args);
  }
  async deleteOccupationalDose(
    args: Prisma.OccupationalDoseDeleteArgs
  ): Promise<PrismaOccupationalDose> {
    return this.prisma.occupationalDose.delete(args);
  }
}
