/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { OccupationalDose } from "./OccupationalDose";
import { OccupationalDoseCountArgs } from "./OccupationalDoseCountArgs";
import { OccupationalDoseFindManyArgs } from "./OccupationalDoseFindManyArgs";
import { OccupationalDoseFindUniqueArgs } from "./OccupationalDoseFindUniqueArgs";
import { CreateOccupationalDoseArgs } from "./CreateOccupationalDoseArgs";
import { UpdateOccupationalDoseArgs } from "./UpdateOccupationalDoseArgs";
import { DeleteOccupationalDoseArgs } from "./DeleteOccupationalDoseArgs";
import { OccupationalDoseService } from "../occupationalDose.service";
@graphql.Resolver(() => OccupationalDose)
export class OccupationalDoseResolverBase {
  constructor(protected readonly service: OccupationalDoseService) {}

  async _occupationalDosesMeta(
    @graphql.Args() args: OccupationalDoseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OccupationalDose])
  async occupationalDoses(
    @graphql.Args() args: OccupationalDoseFindManyArgs
  ): Promise<OccupationalDose[]> {
    return this.service.occupationalDoses(args);
  }

  @graphql.Query(() => OccupationalDose, { nullable: true })
  async occupationalDose(
    @graphql.Args() args: OccupationalDoseFindUniqueArgs
  ): Promise<OccupationalDose | null> {
    const result = await this.service.occupationalDose(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OccupationalDose)
  async createOccupationalDose(
    @graphql.Args() args: CreateOccupationalDoseArgs
  ): Promise<OccupationalDose> {
    return await this.service.createOccupationalDose({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => OccupationalDose)
  async updateOccupationalDose(
    @graphql.Args() args: UpdateOccupationalDoseArgs
  ): Promise<OccupationalDose | null> {
    try {
      return await this.service.updateOccupationalDose({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OccupationalDose)
  async deleteOccupationalDose(
    @graphql.Args() args: DeleteOccupationalDoseArgs
  ): Promise<OccupationalDose | null> {
    try {
      return await this.service.deleteOccupationalDose(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
