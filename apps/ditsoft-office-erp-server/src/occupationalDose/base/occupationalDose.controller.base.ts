/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OccupationalDoseService } from "../occupationalDose.service";
import { OccupationalDoseCreateInput } from "./OccupationalDoseCreateInput";
import { OccupationalDose } from "./OccupationalDose";
import { OccupationalDoseFindManyArgs } from "./OccupationalDoseFindManyArgs";
import { OccupationalDoseWhereUniqueInput } from "./OccupationalDoseWhereUniqueInput";
import { OccupationalDoseUpdateInput } from "./OccupationalDoseUpdateInput";

export class OccupationalDoseControllerBase {
  constructor(protected readonly service: OccupationalDoseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OccupationalDose })
  async createOccupationalDose(
    @common.Body() data: OccupationalDoseCreateInput
  ): Promise<OccupationalDose> {
    return await this.service.createOccupationalDose({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        hp10: true,
        hp0_7: true,
        measurementDate: true,
        employeeId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OccupationalDose] })
  @ApiNestedQuery(OccupationalDoseFindManyArgs)
  async occupationalDoses(
    @common.Req() request: Request
  ): Promise<OccupationalDose[]> {
    const args = plainToClass(OccupationalDoseFindManyArgs, request.query);
    return this.service.occupationalDoses({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        hp10: true,
        hp0_7: true,
        measurementDate: true,
        employeeId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OccupationalDose })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async occupationalDose(
    @common.Param() params: OccupationalDoseWhereUniqueInput
  ): Promise<OccupationalDose | null> {
    const result = await this.service.occupationalDose({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        hp10: true,
        hp0_7: true,
        measurementDate: true,
        employeeId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OccupationalDose })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOccupationalDose(
    @common.Param() params: OccupationalDoseWhereUniqueInput,
    @common.Body() data: OccupationalDoseUpdateInput
  ): Promise<OccupationalDose | null> {
    try {
      return await this.service.updateOccupationalDose({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          hp10: true,
          hp0_7: true,
          measurementDate: true,
          employeeId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OccupationalDose })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOccupationalDose(
    @common.Param() params: OccupationalDoseWhereUniqueInput
  ): Promise<OccupationalDose | null> {
    try {
      return await this.service.deleteOccupationalDose({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          hp10: true,
          hp0_7: true,
          measurementDate: true,
          employeeId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
