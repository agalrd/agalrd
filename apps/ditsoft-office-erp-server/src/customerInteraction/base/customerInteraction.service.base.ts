/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CustomerInteraction as PrismaCustomerInteraction,
} from "@prisma/client";

export class CustomerInteractionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerInteractionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerInteraction.count(args);
  }

  async customerInteractions(
    args: Prisma.CustomerInteractionFindManyArgs
  ): Promise<PrismaCustomerInteraction[]> {
    return this.prisma.customerInteraction.findMany(args);
  }
  async customerInteraction(
    args: Prisma.CustomerInteractionFindUniqueArgs
  ): Promise<PrismaCustomerInteraction | null> {
    return this.prisma.customerInteraction.findUnique(args);
  }
  async createCustomerInteraction(
    args: Prisma.CustomerInteractionCreateArgs
  ): Promise<PrismaCustomerInteraction> {
    return this.prisma.customerInteraction.create(args);
  }
  async updateCustomerInteraction(
    args: Prisma.CustomerInteractionUpdateArgs
  ): Promise<PrismaCustomerInteraction> {
    return this.prisma.customerInteraction.update(args);
  }
  async deleteCustomerInteraction(
    args: Prisma.CustomerInteractionDeleteArgs
  ): Promise<PrismaCustomerInteraction> {
    return this.prisma.customerInteraction.delete(args);
  }
}
