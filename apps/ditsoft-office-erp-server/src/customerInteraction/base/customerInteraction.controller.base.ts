/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomerInteractionService } from "../customerInteraction.service";
import { CustomerInteractionCreateInput } from "./CustomerInteractionCreateInput";
import { CustomerInteraction } from "./CustomerInteraction";
import { CustomerInteractionFindManyArgs } from "./CustomerInteractionFindManyArgs";
import { CustomerInteractionWhereUniqueInput } from "./CustomerInteractionWhereUniqueInput";
import { CustomerInteractionUpdateInput } from "./CustomerInteractionUpdateInput";

export class CustomerInteractionControllerBase {
  constructor(protected readonly service: CustomerInteractionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomerInteraction })
  async createCustomerInteraction(
    @common.Body() data: CustomerInteractionCreateInput
  ): Promise<CustomerInteraction> {
    return await this.service.createCustomerInteraction({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        interactionDate: true,
        notes: true,
        interactionType: true,
        customerId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomerInteraction] })
  @ApiNestedQuery(CustomerInteractionFindManyArgs)
  async customerInteractions(
    @common.Req() request: Request
  ): Promise<CustomerInteraction[]> {
    const args = plainToClass(CustomerInteractionFindManyArgs, request.query);
    return this.service.customerInteractions({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        interactionDate: true,
        notes: true,
        interactionType: true,
        customerId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomerInteraction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customerInteraction(
    @common.Param() params: CustomerInteractionWhereUniqueInput
  ): Promise<CustomerInteraction | null> {
    const result = await this.service.customerInteraction({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        interactionDate: true,
        notes: true,
        interactionType: true,
        customerId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomerInteraction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomerInteraction(
    @common.Param() params: CustomerInteractionWhereUniqueInput,
    @common.Body() data: CustomerInteractionUpdateInput
  ): Promise<CustomerInteraction | null> {
    try {
      return await this.service.updateCustomerInteraction({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          interactionDate: true,
          notes: true,
          interactionType: true,
          customerId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomerInteraction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomerInteraction(
    @common.Param() params: CustomerInteractionWhereUniqueInput
  ): Promise<CustomerInteraction | null> {
    try {
      return await this.service.deleteCustomerInteraction({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          interactionDate: true,
          notes: true,
          interactionType: true,
          customerId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
