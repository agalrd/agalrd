/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CustomerInteraction } from "./CustomerInteraction";
import { CustomerInteractionCountArgs } from "./CustomerInteractionCountArgs";
import { CustomerInteractionFindManyArgs } from "./CustomerInteractionFindManyArgs";
import { CustomerInteractionFindUniqueArgs } from "./CustomerInteractionFindUniqueArgs";
import { CreateCustomerInteractionArgs } from "./CreateCustomerInteractionArgs";
import { UpdateCustomerInteractionArgs } from "./UpdateCustomerInteractionArgs";
import { DeleteCustomerInteractionArgs } from "./DeleteCustomerInteractionArgs";
import { CustomerInteractionService } from "../customerInteraction.service";
@graphql.Resolver(() => CustomerInteraction)
export class CustomerInteractionResolverBase {
  constructor(protected readonly service: CustomerInteractionService) {}

  async _customerInteractionsMeta(
    @graphql.Args() args: CustomerInteractionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CustomerInteraction])
  async customerInteractions(
    @graphql.Args() args: CustomerInteractionFindManyArgs
  ): Promise<CustomerInteraction[]> {
    return this.service.customerInteractions(args);
  }

  @graphql.Query(() => CustomerInteraction, { nullable: true })
  async customerInteraction(
    @graphql.Args() args: CustomerInteractionFindUniqueArgs
  ): Promise<CustomerInteraction | null> {
    const result = await this.service.customerInteraction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CustomerInteraction)
  async createCustomerInteraction(
    @graphql.Args() args: CreateCustomerInteractionArgs
  ): Promise<CustomerInteraction> {
    return await this.service.createCustomerInteraction({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CustomerInteraction)
  async updateCustomerInteraction(
    @graphql.Args() args: UpdateCustomerInteractionArgs
  ): Promise<CustomerInteraction | null> {
    try {
      return await this.service.updateCustomerInteraction({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerInteraction)
  async deleteCustomerInteraction(
    @graphql.Args() args: DeleteCustomerInteractionArgs
  ): Promise<CustomerInteraction | null> {
    try {
      return await this.service.deleteCustomerInteraction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
